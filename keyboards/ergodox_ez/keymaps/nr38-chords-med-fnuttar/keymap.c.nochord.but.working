#include QMK_KEYBOARD_H
#include "version.h"

#define BASE 0 // default layer
#define SYMB 1 // symbols
#define MDIA 2 // media keys

enum custom_keycodes {
#ifdef ORYX_CONFIGURATOR
  EPRM = EZ_SAFE_RANGE,
#else
  EPRM = SAFE_RANGE,
#endif
  VRSN,
  RGB_SLD
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
/* Keymap 0: Basic layer
 *
 * ,--------------------------------------------------.           ,--------------------------------------------------.
 * |   =    |   1  |   2  |   3  |   4  |   5  | LEFT |           | RIGHT|   6  |   7  |   8  |   9  |   0  |   -    |
 * |--------+------+------+------+------+-------------|           |------+------+------+------+------+------+--------|
 * | Del    |   Q  |   W  |   E  |   R  |   T  |  L1  |           |  L1  |   Y  |   U  |   I  |   O  |   P  |   \    |
 * |--------+------+------+------+------+------|      |           |      |------+------+------+------+------+--------|
 * | BkSp   |   A  |   S  |   D  |   F  |   G  |------|           |------|   H  |   J  |   K  |   L  |; / L2|' / Cmd |
 * |--------+------+------+------+------+------| Hyper|           | Meh  |------+------+------+------+------+--------|
 * | LShift |Z/Ctrl|   X  |   C  |   V  |   B  |      |           |      |   N  |   M  |   ,  |   .  |//Ctrl| RShift |
 * `--------+------+------+------+------+-------------'           `-------------+------+------+------+------+--------'
 *   |Grv/L1|  '"  |AltShf| Left | Right|                                       |  Up  | Down |   [  |   ]  | ~L1  |
 *   `----------------------------------'                                       `----------------------------------'
 *                                        ,-------------.       ,-------------.
 *                                        | App  | LGui |       | Alt  |Ctrl/Esc|
 *                                 ,------|------|------|       |------+--------+------.
 *                                 |      |      | Home |       | PgUp |        |      |
 *                                 | Space|Backsp|------|       |------|  Tab   |Enter |
 *                                 |      |ace   | End  |       | PgDn |        |      |
 *                                 `--------------------'       `----------------------'
 */
//[BASE] = LAYOUT_ergodox(
  // left hand
//  KC_EQL,          KC_1,        KC_2,          KC_3,    KC_4,    KC_5,    KC_LEFT,
//  KC_DEL,          KC_Q,        KC_W,          KC_E,    KC_R,    KC_T,    TG(SYMB),
//  KC_BSPC,         KC_A,        KC_S,          KC_D,    KC_F,    KC_G,
//  KC_LSFT,         CTL_T(KC_Z), KC_X,          KC_C,    KC_V,    KC_B,    ALL_T(KC_NO),
//  LT(SYMB,KC_GRV), KC_QUOT,     LALT(KC_LSFT), KC_LEFT, KC_RGHT,
//                                                           ALT_T(KC_APP), KC_LGUI,
//                                                                          KC_HOME,
//                                                         KC_SPC, KC_BSPC, KC_END,
// left hand
[0] = LAYOUT_ergodox(
  KC_TAB,          KC_F1,        KC_F2,         KC_F3,        KC_F4,         KC_F5,      LGUI(KC_BSLS),
  KC_LGUI,         KC_Q,         KC_W,          KC_F,         LT(4,KC_P),    KC_G,       KC_INS,
  LT(2,KC_COMM),   KC_A,         KC_R,          KC_S,         KC_T,          KC_D,    
  KC_LGUI,         LCTL_T(KC_Z), LALT_T(KC_X),  RALT_T(KC_C), LGUI_T(KC_V),  LT(4,KC_B), KC_DEL,  
  KC_LCTL,  KC_LALT,  KC_APP,  MO(3),  KC_LSFT, 
                                                 LGUI(KC_BSLS),   KC_HOME,
						                  KC_END, 
                                                 KC_BSPC, KC_TAB, KC_ESC,
// right hand						
 LSFT(KC_Q),       KC_F6,        KC_F7,         KC_F8,        KC_F9,         KC_F10,          KC_F11, 
 LCA(KC_UP),       KC_J,         KC_L,          KC_U,         KC_Y,          RALT(KC_P),      KC_SCLN, 
                   KC_H,         KC_N,          KC_E,         KC_I,          KC_O,            KC_DOT,     
 LCA(KC_DOWN),     RSFT_T(KC_K), RGUI_T(KC_M),  RALT(KC_W),   RALT(KC_Q),    RCTL_T(KC_SLSH), KC_QUOT, 
                                       MO(1), KC_LEFT, KC_UP, KC_DOWN, KC_RGHT, 
 KC_MPLY,               KC_MFFD, 
 KC_PGUP, 
 KC_PGDN, LT(3,KC_ENT), LT(2,KC_SPC)),
						 
  // right hand
//  KC_RGHT,      KC_6,    KC_7,    KC_8,    KC_9,              KC_0,           KC_MINS,
//  TG(SYMB),     KC_Y,    KC_U,    KC_I,    KC_O,              KC_P,           KC_BSLS,
//  KC_H,         KC_J,    KC_K,    KC_L,    LT(MDIA, KC_SCLN), GUI_T(KC_QUOT),
//  MEH_T(KC_NO), KC_N,    KC_M,    KC_COMM, KC_DOT,            CTL_T(KC_SLSH), KC_RSFT,
//  KC_UP,        KC_DOWN, KC_LBRC, KC_RBRC, TT(SYMB),
//  KC_LALT, CTL_T(KC_ESC),
//  KC_PGUP,
//  KC_PGDN, KC_TAB, KC_ENT
//),
/* Keymap 1: Symbol Layer
 *
 * ,---------------------------------------------------.           ,--------------------------------------------------.
 * |Version  |  F1  |  F2  |  F3  |  F4  |  F5  |      |           |      |  F6  |  F7  |  F8  |  F9  |  F10 |   F11  |
 * |---------+------+------+------+------+------+------|           |------+------+------+------+------+------+--------|
 * |         |   !  |   @  |   {  |   }  |   |  |      |           |      |   Up |   7  |   8  |   9  |   *  |   F12  |
 * |---------+------+------+------+------+------|      |           |      |------+------+------+------+------+--------|
 * |         |   #  |   $  |   (  |   )  |   `  |------|           |------| Down |   4  |   5  |   6  |   +  |        |
 * |---------+------+------+------+------+------|      |           |      |------+------+------+------+------+--------|
 * |         |   %  |   ^  |   [  |   ]  |   ~  |      |           |      |   &  |   1  |   2  |   3  |   \  |        |
 * `---------+------+------+------+------+-------------'           `-------------+------+------+------+------+--------'
 *   | EPRM  |      |      |      |      |                                       |      |    . |   0  |   =  |      |
 *   `-----------------------------------'                                       `----------------------------------'
 *                                        ,-------------.       ,-------------.
 *                                        |Animat|      |       |Toggle|Solid |
 *                                 ,------|------|------|       |------+------+------.
 *                                 |Bright|Bright|      |       |      |Hue-  |Hue+  |
 *                                 |ness- |ness+ |------|       |------|      |      |
 *                                 |      |      |      |       |      |      |      |
 *                                 `--------------------'       `--------------------'
 */
//[SYMB] = LAYOUT_ergodox(
  // left hand
//  VRSN,    KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_TRNS,
//  KC_TRNS, KC_EXLM, KC_AT,   KC_LCBR, KC_RCBR, KC_PIPE, KC_TRNS,
//  KC_TRNS, KC_HASH, KC_DLR,  KC_LPRN, KC_RPRN, KC_GRV,
//  KC_TRNS, KC_PERC, KC_CIRC, KC_LBRC, KC_RBRC, KC_TILD, KC_TRNS,
//  EPRM,    KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
//                                               RGB_MOD, KC_TRNS,
//                                                        KC_TRNS,
//                                      RGB_VAD, RGB_VAI, KC_TRNS,
[1] = LAYOUT_ergodox(
 KC_NO,  KC_NO,   KC_NO,   KC_NO,   KC_NO,           KC_NO,   KC_NO, 
 KC_NO,  KC_SCLN, KC_COLN, KC_MINS, KC_RPRN,         KC_PIPE, KC_NO,
 KC_NO,  KC_LPRN, KC_COMM, KC_DOT,  KC_SLSH,         KC_AT, 
 KC_NO,  KC_CIRC, KC_AMPR, KC_QUOT, LGUI_T(KC_BSLS), KC_GRV, KC_NO, 
 KC_NO, KC_NO, KC_NO, KC_DEL, KC_LSFT,
                                                 KC_NO,          KC_NO, 
						                 KC_NO, 
					         KC_BSPC, KC_NO, KC_NO, 
// right hand						 
 KC_NO,  KC_NO,        KC_NO,  KC_NO, KC_NO,   KC_NO,      KC_NO, 
 KC_NO,  KC_EQL,       KC_7,   KC_8,  KC_9,    LSFT(KC_8), KC_NO, 
         LSFT(KC_EQL), KC_4,   KC_5,  KC_6,    KC_MINS,    KC_NO, 
 KC_NO,  KC_0,         KC_1,   KC_2,  KC_3,    KC_SLSH,    KC_NO,
                       KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO,
 KC_NO,        KC_NLCK,
 KC_NO,
 KC_NO, KC_NO, KC_NO),


// right hand
//  KC_TRNS, KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,
//  KC_TRNS, KC_UP,   KC_7,    KC_8,    KC_9,    KC_ASTR, KC_F12,
//  KC_DOWN, KC_4,    KC_5,    KC_6,    KC_PLUS, KC_TRNS,
//  KC_TRNS, KC_AMPR, KC_1,    KC_2,    KC_3,    KC_BSLS, KC_TRNS,
//  KC_TRNS, KC_DOT,  KC_0,    KC_EQL,  KC_TRNS,
//  RGB_TOG, RGB_SLD,
//  KC_TRNS,
//  KC_TRNS, RGB_HUD, RGB_HUI
//),
/* Keymap 2: Media and mouse keys
 *
 * ,--------------------------------------------------.           ,--------------------------------------------------.
 * |        |      |      |      |      |      |      |           |      |      |      |      |      |      |        |
 * |--------+------+------+------+------+-------------|           |------+------+------+------+------+------+--------|
 * |        |      |      | MsUp |      |      |      |           |      |      |      |      |      |      |        |
 * |--------+------+------+------+------+------|      |           |      |------+------+------+------+------+--------|
 * |        |      |MsLeft|MsDown|MsRght|      |------|           |------|      |      |      |      |      |  Play  |
 * |--------+------+------+------+------+------|      |           |      |------+------+------+------+------+--------|
 * |        |      |      |      |      |      |      |           |      |      |      | Prev | Next |      |        |
 * `--------+------+------+------+------+-------------'           `-------------+------+------+------+------+--------'
 *   |      |      |      | Lclk | Rclk |                                       |VolUp |VolDn | Mute |      |      |
 *   `----------------------------------'                                       `----------------------------------'
 *                                        ,-------------.       ,-------------.
 *                                        |      |      |       |      |      |
 *                                 ,------|------|------|       |------+------+------.
 *                                 |      |      |      |       |      |      |Brwser|
 *                                 |      |      |------|       |------|      |Back  |
 *                                 |      |      |      |       |      |      |      |
 *                                 `--------------------'       `--------------------'
 */
//[MDIA] = LAYOUT_ergodox(
  // left hand
//  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
//  KC_TRNS, KC_TRNS, KC_TRNS, KC_MS_U, KC_TRNS, KC_TRNS, KC_TRNS,
//  KC_TRNS, KC_TRNS, KC_MS_L, KC_MS_D, KC_MS_R, KC_TRNS,
//  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
//  KC_TRNS, KC_TRNS, KC_TRNS, KC_BTN1, KC_BTN2,
//                                               KC_TRNS, KC_TRNS,
//                                                        KC_TRNS,
//                                      KC_TRNS, KC_TRNS, KC_TRNS,
//
//left hand
[2] = LAYOUT_ergodox(
 KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
 KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
 KC_TRNS, KC_TRNS, KC_LCTL, KC_LGUI, KC_LALT, KC_TAB,
 KC_TRNS, KC_MS_L, KC_MS_U, KC_MS_D, KC_MS_R, KC_TRNS, KC_TRNS,
   KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LSFT,
                                              KC_TRNS, KC_TRNS,
					               KC_TRNS,
					 KC_BTN1, KC_BTN2, KC_TRNS,
// right hand					
 KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,     KC_TRNS,     KC_TRNS, KC_TRNS,
 KC_TRNS, KC_TRNS, KC_HOME, KC_PGUP,     KC_PGDN,     KC_END,  KC_TRNS, 
          KC_TAB,  KC_LEFT, KC_UP,   KC_DOWN,     KC_RGHT,     KC_SLSH,
 KC_TRNS, KC_TRNS, KC_WBAK, RCTL(KC_NO), RCTL(KC_NO), KC_WFWD, KC_TRNS,
                         KC_LGUI, KC_NO, KC_NO, KC_TRNS, KC_TRNS,
 KC_WBAK,          KC_TRNS,
 KC_TRNS,
 KC_TRNS, KC_TRNS, KC_TRNS),
// right hand
//  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
//  KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
//           KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_MPLY,
//  KC_TRNS, KC_TRNS, KC_TRNS, KC_MPRV, KC_MNXT, KC_TRNS, KC_TRNS,
//                    KC_VOLU, KC_VOLD, KC_MUTE, KC_TRNS, KC_TRNS,
//  KC_TRNS, KC_TRNS,
//  KC_TRNS,
//  KC_TRNS, KC_TRNS, KC_WBAK
//),
//left hand
[3] = LAYOUT_ergodox(
 KC_NO, KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,
 KC_NO, KC_TILD, KC_PERC, KC_EXLM, KC_HASH, KC_PIPE, KC_NO,
 KC_NO, KC_LPRN, KC_LBRC, KC_RBRC, KC_RPRN, KC_AT,
 KC_NO, KC_CIRC, KC_AMPR, KC_DLR,  KC_BSLS, KC_EQL,  KC_NO,
   KC_NO, KC_NO, KC_NO, KC_TRNS, KC_LSFT,
                                         KC_NO,        KC_NO,
				                       KC_NO,
				         KC_NO, KC_NO, KC_NO,
// right hand					
 KC_R,  KC_E,  KC_I,  KC_S,  KC_U,  KC_B,   KC_PSCR,
 KC_NO, KC_NO, KC_F7, KC_F8, KC_F9, KC_F10, KC_LALT,
        KC_NO, KC_F4, KC_F5, KC_F6, KC_F11, KC_NO, 
 KC_NO, KC_NO, KC_F1, KC_F2, KC_F3, KC_F12, KC_NO, 
                   KC_RSFT, KC_NO, KC_NO, KC_NO, KC_NO, 
 KC_NO,          KC_NO,
 KC_NO,
 KC_NO, KC_TRNS, KC_LGUI),

// left hand
[4] = LAYOUT_ergodox(
 KC_NO, KC_NO,         KC_NO,       KC_NO,               KC_NO,                KC_NO,   KC_NO,
 KC_NO, KC_NO,         KC_NO,       KC_LCTL,             KC_TRNS,              KC_NO,   KC_NO,
 KC_NO, LGUI(KC_LEFT), LGUI(KC_UP), LGUI(KC_DOWN),       LGUI(KC_RGHT),        KC_NO,
 KC_NO, KC_NO,         KC_NO,       LCTL(LGUI(KC_LEFT)), LCTL(LGUI(KC_RIGHT)), KC_TRNS, KC_NO,
   KC_NO, KC_NO, KC_NO, KC_NO, KC_LSFT,
                                       KC_NO,        KC_NO,
				                     KC_NO,
				       KC_NO, KC_NO, KC_NO,
// right hand				      
 KC_NO, KC_NO,         KC_NO,         KC_NO,       KC_NO,         KC_NO,         KC_NO,
 KC_NO, KC_NO,         KC_NO,         KC_NO,       KC_NO,         KC_NO,         KC_NO,
        LGUI(KC_BSLS), LGUI(KC_LEFT), LGUI(KC_UP), LGUI(KC_DOWN), LGUI(KC_RGHT), KC_NO,
 KC_NO, KC_NO,         KC_NO,         KC_NO,       KC_NO,         KC_NO,         KC_NO,
                      KC_NO, KC_NO, KC_NO, KC_NO, KC_NO,
 KC_NO,        KC_NO, 
 KC_NO,
 KC_NO, KC_NO, KC_NO)

};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  if (record->event.pressed) {
    switch (keycode) {
      case EPRM:
        eeconfig_init();
        return false;
      case VRSN:
        SEND_STRING (QMK_KEYBOARD "/" QMK_KEYMAP " @ " QMK_VERSION);
        return false;
      #ifdef RGBLIGHT_ENABLE
      case RGB_SLD:
        rgblight_mode(1);
        return false;
      #endif
    }
  }
  return true;
}

// Runs just one time when the keyboard initializes.
void matrix_init_user(void) {
#ifdef RGBLIGHT_COLOR_LAYER_0
  rgblight_setrgb(RGBLIGHT_COLOR_LAYER_0);
#endif
};

// Runs whenever there is a layer state change.
layer_state_t layer_state_set_user(layer_state_t state) {
  ergodox_board_led_off();
  ergodox_right_led_1_off();
  ergodox_right_led_2_off();
  ergodox_right_led_3_off();

  uint8_t layer = get_highest_layer(state);
  switch (layer) {
      case 0:
        #ifdef RGBLIGHT_COLOR_LAYER_0
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_0);
        #else
        #ifdef RGBLIGHT_ENABLE
          rgblight_init();
        #endif
        #endif
        break;
      case 1:
        ergodox_right_led_1_on();
        #ifdef RGBLIGHT_COLOR_LAYER_1
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_1);
        #endif
        break;
      case 2:
        ergodox_right_led_2_on();
        #ifdef RGBLIGHT_COLOR_LAYER_2
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_2);
        #endif
        break;
      case 3:
        ergodox_right_led_3_on();
        #ifdef RGBLIGHT_COLOR_LAYER_3
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_3);
        #endif
        break;
      case 4:
        ergodox_right_led_1_on();
        ergodox_right_led_2_on();
        #ifdef RGBLIGHT_COLOR_LAYER_4
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_4);
        #endif
        break;
      case 5:
        ergodox_right_led_1_on();
        ergodox_right_led_3_on();
        #ifdef RGBLIGHT_COLOR_LAYER_5
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_5);
        #endif
        break;
      case 6:
        ergodox_right_led_2_on();
        ergodox_right_led_3_on();
        #ifdef RGBLIGHT_COLOR_LAYER_6
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_6);
        #endif
        break;
      case 7:
        ergodox_right_led_1_on();
        ergodox_right_led_2_on();
        ergodox_right_led_3_on();
        #ifdef RGBLIGHT_COLOR_LAYER_7
          rgblight_setrgb(RGBLIGHT_COLOR_LAYER_7);
        #endif
        break;
      default:
        break;
    }

  return state;
};
